📌 ChatApp - Real-Time Chat Application  
🚀 A simple real-time chat application built with React.js, Node.js, Express, and Socket.io.  
This allows users to join a chat room, send messages, and see when other users are typing.  


🔹 Features
--> Real-time messaging with multiple users  
--> Join with a username and chat instantly  
--> Typing indicator when someone is typing  
--> User join/leave notifications  

 Tech Stack Used
| Technology | Purpose |
|------------|---------|
| React.js | Frontend UI |
| Node.js | Backend server |
| Express.js | Handles HTTP requests |
| Socket.io | Enables real-time chat |

---

 📂 Project Structure

ChatApp/
│── server.js          # Backend (Node.js + Socket.io)
│── package.json       # Dependencies
│── frontend/          # React Frontend
│   ├── src/
│   │   ├── App.js     # Main React Component
│   │   ├── ChatApp.js # Chat functionality
│   │   ├── index.js   # Renders App component
│── README.md          # Project documentation


---

 Installation & Setup:
-------------------------
# 1️⃣ Clone the Repository

git clone https://github.com/yourusername/ChatApp.git
cd ChatApp


# 2️⃣ Install Backend Dependencies

npm install express socket.io cors


# 3️⃣ Install Frontend Dependencies

cd frontend
npm install socket.io-client react-router-dom


# 4️⃣ Start the Backend Server

node server.js

--> Server running on `http://localhost:5000`

# 5️⃣ Start the Frontend

cd frontend
npm start

-->Open `http://localhost:3000` in your browser.

---

 🔹 Backend Code (`server.js`)
-->This file runs a WebSocket server using `Socket.io`.  

javascript
// Import required modules
const express = require("express");  // Backend framework
const http = require("http");  // Create HTTP server
const socketIo = require("socket.io");  // WebSocket library
const cors = require("cors");  // Allow frontend to connect

const app = express();
app.use(cors());  // Enable CORS

// Create HTTP server and attach Socket.io
const server = http.createServer(app);
const io = socketIo(server, { cors: { origin: "*" } });

// When a client connects
io.on("connection", (socket) => {
  console.log("A user connected:", socket.id);

  // Handle user joining
  socket.on("join", (username) => {
    socket.username = username;
    io.emit("user-joined", username);
  });

  // Handle message sending
  socket.on("send-message", (data) => {
    io.emit("receive-message", data);
  });

  // Handle typing indicator
  socket.on("typing", (username) => {
    socket.broadcast.emit("typing", username);
  });

  // Handle user disconnect
  socket.on("disconnect", () => {
    io.emit("user-left", socket.username);
    console.log("User disconnected:", socket.id);
  });
});

// Start server on port 5000
server.listen(5000, () => console.log("Server running on port 5000"));


---

 🔹 Frontend Code (`ChatApp.js`)
-->This component handles chat messages and connects to the backend WebSocket server.  

javascript
import React, { useState, useEffect } from "react";
import io from "socket.io-client";  // Import Socket.io client

const socket = io("http://localhost:5000");  // Connect to WebSocket server

export default function ChatApp() {
  // State variables
  const [username, setUsername] = useState("");  // Stores user name
  const [message, setMessage] = useState("");  // Stores typed message
  const [messages, setMessages] = useState([]);  // Stores chat messages
  const [typing, setTyping] = useState("");  // ows typing notification

  // Handle WebSocket events
  useEffect(() => {
    // Receive a message from the server
    socket.on("receive-message", (data) => {
      setMessages((prev) => [...prev, data]);
      setTyping("");  // Clear typing indicator
    });

    // ow typing indicator
    socket.on("typing", (username) => {
      setTyping(`${username} is typing...`);
    });

    // Notify when a user joins
    socket.on("user-joined", (username) => {
      setMessages((prev) => [...prev, { user: "System", text: `${username} joined the chat` }]);
    });

    // Notify when a user leaves
    socket.on("user-left", (username) => {
      setMessages((prev) => [...prev, { user: "System", text: `${username} left the chat` }]);
    });

    return () => socket.disconnect();  // Cleanup when component unmounts
  }, []);

  // Send a message
  const sendMessage = () => {
    if (message.trim()) {
      socket.emit("send-message", { user: username, text: message });
      setMessage("");  // Clear input field
    }
  };

  // Notify server when user is typing
  const handleTyping = () => {
    socket.emit("typing", username);
  };

  return (
    <div style={{ textAlign: "center", marginTop: "20px" }}>
      {/* ow username input if not set */}
      {!username ? (
        <div>
          <input
            type="text"
            placeholder="Enter username"
            onChange={(e) => setUsername(e.target.value)}
            style={{ padding: "10px", marginRight: "10px" }}
          />
          <button onClick={() => socket.emit("join", username)}>Join Chat</button>
        </div>
      ) : (
        <div>
          <h2>Chat Room</h2>
          <div
            style={{
              border: "1px solid gray",
              width: "50%",
              margin: "auto",
              padding: "10px",
              height: "300px",
              overflowY: "auto",
            }}
          >
            {messages.map((msg, index) => (
              <p key={index}>
                <strong>{msg.user}:</strong> {msg.text}
              </p>
            ))}
          </div>
          <p>{typing}</p>
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={handleTyping}
            style={{ padding: "10px", width: "60%", marginTop: "10px" }}
          />
          <button onClick={sendMessage} style={{ marginLeft: "10px" }}>Send</button>
        </div>
      )}
    </div>
  );
}


---

Conclusion:
This project was a great learning experience in real-time communication using WebSockets!  
 Next Steps: Add private chat rooms, authentication, and file aring.  


#ReactJS #NodeJS #SocketIO #WebSockets #FullStackDevelopment #ChatApp #WebDevelopment 🚀
